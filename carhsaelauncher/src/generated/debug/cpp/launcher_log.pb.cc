// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: launcher_log.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "launcher_log.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace userevent {

namespace {

const ::google::protobuf::Descriptor* Target_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Target_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Target_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Action_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Action_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Action_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Action_Touch_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Action_Direction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Action_Command_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LauncherEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LauncherEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ItemType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ContainerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ControlType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TipType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_launcher_5flog_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_launcher_5flog_2eproto() {
  protobuf_AddDesc_launcher_5flog_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "launcher_log.proto");
  GOOGLE_CHECK(file != NULL);
  Target_descriptor_ = file->message_type(0);
  static const int Target_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, page_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, grid_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, grid_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, container_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, cardinality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, control_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, item_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, package_name_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, component_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, intent_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, span_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, span_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, predictedrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, tip_type_),
  };
  Target_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Target_descriptor_,
      Target::internal_default_instance(),
      Target_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, _has_bits_),
      -1,
      -1,
      sizeof(Target),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, _internal_metadata_));
  Target_Type_descriptor_ = Target_descriptor_->enum_type(0);
  Action_descriptor_ = file->message_type(1);
  static const int Action_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, touch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, is_outside_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, is_state_change_),
  };
  Action_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Action_descriptor_,
      Action::internal_default_instance(),
      Action_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _has_bits_),
      -1,
      -1,
      sizeof(Action),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _internal_metadata_));
  Action_Type_descriptor_ = Action_descriptor_->enum_type(0);
  Action_Touch_descriptor_ = Action_descriptor_->enum_type(1);
  Action_Direction_descriptor_ = Action_descriptor_->enum_type(2);
  Action_Command_descriptor_ = Action_descriptor_->enum_type(3);
  LauncherEvent_descriptor_ = file->message_type(2);
  static const int LauncherEvent_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LauncherEvent, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LauncherEvent, src_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LauncherEvent, dest_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LauncherEvent, action_duration_millis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LauncherEvent, elapsed_container_millis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LauncherEvent, elapsed_session_millis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LauncherEvent, is_in_multi_window_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LauncherEvent, is_in_landscape_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LauncherEvent, extension_),
  };
  LauncherEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LauncherEvent_descriptor_,
      LauncherEvent::internal_default_instance(),
      LauncherEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LauncherEvent, _has_bits_),
      -1,
      -1,
      sizeof(LauncherEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LauncherEvent, _internal_metadata_));
  ItemType_descriptor_ = file->enum_type(0);
  ContainerType_descriptor_ = file->enum_type(1);
  ControlType_descriptor_ = file->enum_type(2);
  TipType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_launcher_5flog_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Target_descriptor_, Target::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Action_descriptor_, Action::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LauncherEvent_descriptor_, LauncherEvent::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_launcher_5flog_2eproto() {
  Target_default_instance_.Shutdown();
  delete Target_reflection_;
  Action_default_instance_.Shutdown();
  delete Action_reflection_;
  LauncherEvent_default_instance_.Shutdown();
  delete LauncherEvent_reflection_;
}

void protobuf_InitDefaults_launcher_5flog_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::userevent::protobuf_InitDefaults_launcher_5flog_5fextension_2eproto();
  Target_default_instance_.DefaultConstruct();
  Action_default_instance_.DefaultConstruct();
  LauncherEvent_default_instance_.DefaultConstruct();
  Target_default_instance_.get_mutable()->InitAsDefaultInstance();
  Action_default_instance_.get_mutable()->InitAsDefaultInstance();
  LauncherEvent_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_launcher_5flog_2eproto_once_);
void protobuf_InitDefaults_launcher_5flog_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_launcher_5flog_2eproto_once_,
                 &protobuf_InitDefaults_launcher_5flog_2eproto_impl);
}
void protobuf_AddDesc_launcher_5flog_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_launcher_5flog_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022launcher_log.proto\022\tuserevent\032\034launche"
    "r_log_extension.proto\"\237\004\n\006Target\022$\n\004type"
    "\030\001 \001(\0162\026.userevent.Target.Type\022\022\n\npage_i"
    "ndex\030\002 \001(\005\022\014\n\004rank\030\003 \001(\005\022\016\n\006grid_x\030\004 \001(\005"
    "\022\016\n\006grid_y\030\005 \001(\005\0220\n\016container_type\030\006 \001(\016"
    "2\030.userevent.ContainerType\022\023\n\013cardinalit"
    "y\030\007 \001(\005\022,\n\014control_type\030\010 \001(\0162\026.usereven"
    "t.ControlType\022&\n\titem_type\030\t \001(\0162\023.usere"
    "vent.ItemType\022\031\n\021package_name_hash\030\n \001(\005"
    "\022\026\n\016component_hash\030\013 \001(\005\022\023\n\013intent_hash\030"
    "\014 \001(\005\022\021\n\006span_x\030\r \001(\005:\0011\022\021\n\006span_y\030\016 \001(\005"
    ":\0011\022\025\n\rpredictedRank\030\017 \001(\005\022-\n\textension\030"
    "\020 \001(\0132\032.userevent.TargetExtension\022$\n\010tip"
    "_type\030\021 \001(\0162\022.userevent.TipType\"6\n\004Type\022"
    "\010\n\004NONE\020\000\022\010\n\004ITEM\020\001\022\013\n\007CONTROL\020\002\022\r\n\tCONT"
    "AINER\020\003\"\223\004\n\006Action\022$\n\004type\030\001 \001(\0162\026.usere"
    "vent.Action.Type\022&\n\005touch\030\002 \001(\0162\027.userev"
    "ent.Action.Touch\022(\n\003dir\030\003 \001(\0162\033.usereven"
    "t.Action.Direction\022*\n\007command\030\004 \001(\0162\031.us"
    "erevent.Action.Command\022\022\n\nis_outside\030\005 \001"
    "(\010\022\027\n\017is_state_change\030\006 \001(\010\"6\n\004Type\022\t\n\005T"
    "OUCH\020\000\022\r\n\tAUTOMATED\020\001\022\013\n\007COMMAND\020\002\022\007\n\003TI"
    "P\020\003\"N\n\005Touch\022\007\n\003TAP\020\000\022\r\n\tLONGPRESS\020\001\022\014\n\010"
    "DRAGDROP\020\002\022\t\n\005SWIPE\020\003\022\t\n\005FLING\020\004\022\t\n\005PINC"
    "H\020\005\"<\n\tDirection\022\010\n\004NONE\020\000\022\006\n\002UP\020\001\022\010\n\004DO"
    "WN\020\002\022\010\n\004LEFT\020\003\022\t\n\005RIGHT\020\004\"r\n\007Command\022\017\n\013"
    "HOME_INTENT\020\000\022\010\n\004BACK\020\001\022\t\n\005ENTRY\020\002\022\n\n\006CA"
    "NCEL\020\003\022\013\n\007CONFIRM\020\004\022\010\n\004STOP\020\005\022\022\n\016RECENTS"
    "_BUTTON\020\006\022\n\n\006RESUME\020\007\"\330\002\n\rLauncherEvent\022"
    "!\n\006action\030\001 \002(\0132\021.userevent.Action\022%\n\nsr"
    "c_target\030\002 \003(\0132\021.userevent.Target\022&\n\013des"
    "t_target\030\003 \003(\0132\021.userevent.Target\022\036\n\026act"
    "ion_duration_millis\030\004 \001(\003\022 \n\030elapsed_con"
    "tainer_millis\030\005 \001(\003\022\036\n\026elapsed_session_m"
    "illis\030\006 \001(\003\022\037\n\027is_in_multi_window_mode\030\007"
    " \001(\010\022\034\n\024is_in_landscape_mode\030\010 \001(\010\0224\n\tex"
    "tension\030\t \001(\0132!.userevent.LauncherEventE"
    "xtension*\261\001\n\010ItemType\022\024\n\020DEFAULT_ITEMTYP"
    "E\020\000\022\014\n\010APP_ICON\020\001\022\014\n\010SHORTCUT\020\002\022\n\n\006WIDGE"
    "T\020\003\022\017\n\013FOLDER_ICON\020\004\022\020\n\014DEEPSHORTCUT\020\005\022\r"
    "\n\tSEARCHBOX\020\006\022\014\n\010EDITTEXT\020\007\022\020\n\014NOTIFICAT"
    "ION\020\010\022\010\n\004TASK\020\t\022\013\n\007WEB_APP\020\n*\205\002\n\rContain"
    "erType\022\031\n\025DEFAULT_CONTAINERTYPE\020\000\022\r\n\tWOR"
    "KSPACE\020\001\022\013\n\007HOTSEAT\020\002\022\n\n\006FOLDER\020\003\022\013\n\007ALL"
    "APPS\020\004\022\013\n\007WIDGETS\020\005\022\014\n\010OVERVIEW\020\006\022\016\n\nPRE"
    "DICTION\020\007\022\020\n\014SEARCHRESULT\020\010\022\021\n\rDEEPSHORT"
    "CUTS\020\t\022\013\n\007PINITEM\020\n\022\n\n\006NAVBAR\020\013\022\020\n\014TASKS"
    "WITCHER\020\014\022\007\n\003APP\020\r\022\007\n\003TIP\020\016\022\027\n\023SIDELOADE"
    "D_LAUNCHER\020\017*\355\002\n\013ControlType\022\027\n\023DEFAULT_"
    "CONTROLTYPE\020\000\022\023\n\017ALL_APPS_BUTTON\020\001\022\022\n\016WI"
    "DGETS_BUTTON\020\002\022\024\n\020WALLPAPER_BUTTON\020\003\022\023\n\017"
    "SETTINGS_BUTTON\020\004\022\021\n\rREMOVE_TARGET\020\005\022\024\n\020"
    "UNINSTALL_TARGET\020\006\022\022\n\016APPINFO_TARGET\020\007\022\021"
    "\n\rRESIZE_HANDLE\020\010\022\023\n\017VERTICAL_SCROLL\020\t\022\017"
    "\n\013HOME_INTENT\020\n\022\017\n\013BACK_BUTTON\020\013\022\026\n\022QUIC"
    "K_SCRUB_BUTTON\020\014\022\024\n\020CLEAR_ALL_BUTTON\020\r\022\021"
    "\n\rCANCEL_TARGET\020\016\022\020\n\014TASK_PREVIEW\020\017\022\027\n\023S"
    "PLIT_SCREEN_TARGET\020\020*e\n\007TipType\022\020\n\014DEFAU"
    "LT_NONE\020\000\022\n\n\006BOUNCE\020\001\022\021\n\rSWIPE_UP_TEXT\020\002"
    "\022\024\n\020QUICK_SCRUB_TEXT\020\003\022\023\n\017PREDICTION_TEX"
    "T\020\004B/\n\033com.demo.launcher.usereventB\020Laun"
    "cherLogProto", 2452);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "launcher_log.proto", &protobuf_RegisterTypes);
  ::userevent::protobuf_AddDesc_launcher_5flog_5fextension_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_launcher_5flog_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_launcher_5flog_2eproto_once_);
void protobuf_AddDesc_launcher_5flog_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_launcher_5flog_2eproto_once_,
                 &protobuf_AddDesc_launcher_5flog_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_launcher_5flog_2eproto {
  StaticDescriptorInitializer_launcher_5flog_2eproto() {
    protobuf_AddDesc_launcher_5flog_2eproto();
  }
} static_descriptor_initializer_launcher_5flog_2eproto_;
const ::google::protobuf::EnumDescriptor* ItemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemType_descriptor_;
}
bool ItemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ContainerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerType_descriptor_;
}
bool ContainerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ControlType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlType_descriptor_;
}
bool ControlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TipType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TipType_descriptor_;
}
bool TipType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* Target_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Target_Type_descriptor_;
}
bool Target_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Target_Type Target::NONE;
const Target_Type Target::ITEM;
const Target_Type Target::CONTROL;
const Target_Type Target::CONTAINER;
const Target_Type Target::Type_MIN;
const Target_Type Target::Type_MAX;
const int Target::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Target::kTypeFieldNumber;
const int Target::kPageIndexFieldNumber;
const int Target::kRankFieldNumber;
const int Target::kGridXFieldNumber;
const int Target::kGridYFieldNumber;
const int Target::kContainerTypeFieldNumber;
const int Target::kCardinalityFieldNumber;
const int Target::kControlTypeFieldNumber;
const int Target::kItemTypeFieldNumber;
const int Target::kPackageNameHashFieldNumber;
const int Target::kComponentHashFieldNumber;
const int Target::kIntentHashFieldNumber;
const int Target::kSpanXFieldNumber;
const int Target::kSpanYFieldNumber;
const int Target::kPredictedRankFieldNumber;
const int Target::kExtensionFieldNumber;
const int Target::kTipTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Target::Target()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_launcher_5flog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:userevent.Target)
}

void Target::InitAsDefaultInstance() {
  extension_ = const_cast< ::userevent::TargetExtension*>(
      ::userevent::TargetExtension::internal_default_instance());
}

Target::Target(const Target& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userevent.Target)
}

void Target::SharedCtor() {
  _cached_size_ = 0;
  extension_ = NULL;
  ::memset(&type_, 0, reinterpret_cast<char*>(&tip_type_) -
    reinterpret_cast<char*>(&type_) + sizeof(tip_type_));
  span_x_ = 1;
  span_y_ = 1;
}

Target::~Target() {
  // @@protoc_insertion_point(destructor:userevent.Target)
  SharedDtor();
}

void Target::SharedDtor() {
  if (this != &Target_default_instance_.get()) {
    delete extension_;
  }
}

void Target::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Target::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Target_descriptor_;
}

const Target& Target::default_instance() {
  protobuf_InitDefaults_launcher_5flog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Target> Target_default_instance_;

Target* Target::New(::google::protobuf::Arena* arena) const {
  Target* n = new Target;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Target::Clear() {
// @@protoc_insertion_point(message_clear_start:userevent.Target)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Target, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Target*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, control_type_);
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(item_type_, predictedrank_);
    span_x_ = 1;
    span_y_ = 1;
    if (has_extension()) {
      if (extension_ != NULL) extension_->::userevent::TargetExtension::Clear();
    }
  }
  tip_type_ = 0;

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Target::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:userevent.Target)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .userevent.Target.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::userevent::Target_Type_IsValid(value)) {
            set_type(static_cast< ::userevent::Target_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_page_index;
        break;
      }

      // optional int32 page_index = 2;
      case 2: {
        if (tag == 16) {
         parse_page_index:
          set_has_page_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_index_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // optional int32 rank = 3;
      case 3: {
        if (tag == 24) {
         parse_rank:
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_grid_x;
        break;
      }

      // optional int32 grid_x = 4;
      case 4: {
        if (tag == 32) {
         parse_grid_x:
          set_has_grid_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid_x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_grid_y;
        break;
      }

      // optional int32 grid_y = 5;
      case 5: {
        if (tag == 40) {
         parse_grid_y:
          set_has_grid_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid_y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_container_type;
        break;
      }

      // optional .userevent.ContainerType container_type = 6;
      case 6: {
        if (tag == 48) {
         parse_container_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::userevent::ContainerType_IsValid(value)) {
            set_container_type(static_cast< ::userevent::ContainerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cardinality;
        break;
      }

      // optional int32 cardinality = 7;
      case 7: {
        if (tag == 56) {
         parse_cardinality:
          set_has_cardinality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardinality_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_control_type;
        break;
      }

      // optional .userevent.ControlType control_type = 8;
      case 8: {
        if (tag == 64) {
         parse_control_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::userevent::ControlType_IsValid(value)) {
            set_control_type(static_cast< ::userevent::ControlType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_item_type;
        break;
      }

      // optional .userevent.ItemType item_type = 9;
      case 9: {
        if (tag == 72) {
         parse_item_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::userevent::ItemType_IsValid(value)) {
            set_item_type(static_cast< ::userevent::ItemType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_package_name_hash;
        break;
      }

      // optional int32 package_name_hash = 10;
      case 10: {
        if (tag == 80) {
         parse_package_name_hash:
          set_has_package_name_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &package_name_hash_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_component_hash;
        break;
      }

      // optional int32 component_hash = 11;
      case 11: {
        if (tag == 88) {
         parse_component_hash:
          set_has_component_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &component_hash_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_intent_hash;
        break;
      }

      // optional int32 intent_hash = 12;
      case 12: {
        if (tag == 96) {
         parse_intent_hash:
          set_has_intent_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intent_hash_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_span_x;
        break;
      }

      // optional int32 span_x = 13 [default = 1];
      case 13: {
        if (tag == 104) {
         parse_span_x:
          set_has_span_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &span_x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_span_y;
        break;
      }

      // optional int32 span_y = 14 [default = 1];
      case 14: {
        if (tag == 112) {
         parse_span_y:
          set_has_span_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &span_y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_predictedRank;
        break;
      }

      // optional int32 predictedRank = 15;
      case 15: {
        if (tag == 120) {
         parse_predictedRank:
          set_has_predictedrank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &predictedrank_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_extension;
        break;
      }

      // optional .userevent.TargetExtension extension = 16;
      case 16: {
        if (tag == 130) {
         parse_extension:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extension()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_tip_type;
        break;
      }

      // optional .userevent.TipType tip_type = 17;
      case 17: {
        if (tag == 136) {
         parse_tip_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::userevent::TipType_IsValid(value)) {
            set_tip_type(static_cast< ::userevent::TipType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userevent.Target)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userevent.Target)
  return false;
#undef DO_
}

void Target::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userevent.Target)
  // optional .userevent.Target.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 page_index = 2;
  if (has_page_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_index(), output);
  }

  // optional int32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank(), output);
  }

  // optional int32 grid_x = 4;
  if (has_grid_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->grid_x(), output);
  }

  // optional int32 grid_y = 5;
  if (has_grid_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->grid_y(), output);
  }

  // optional .userevent.ContainerType container_type = 6;
  if (has_container_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->container_type(), output);
  }

  // optional int32 cardinality = 7;
  if (has_cardinality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cardinality(), output);
  }

  // optional .userevent.ControlType control_type = 8;
  if (has_control_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->control_type(), output);
  }

  // optional .userevent.ItemType item_type = 9;
  if (has_item_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->item_type(), output);
  }

  // optional int32 package_name_hash = 10;
  if (has_package_name_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->package_name_hash(), output);
  }

  // optional int32 component_hash = 11;
  if (has_component_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->component_hash(), output);
  }

  // optional int32 intent_hash = 12;
  if (has_intent_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->intent_hash(), output);
  }

  // optional int32 span_x = 13 [default = 1];
  if (has_span_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->span_x(), output);
  }

  // optional int32 span_y = 14 [default = 1];
  if (has_span_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->span_y(), output);
  }

  // optional int32 predictedRank = 15;
  if (has_predictedrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->predictedrank(), output);
  }

  // optional .userevent.TargetExtension extension = 16;
  if (has_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->extension_, output);
  }

  // optional .userevent.TipType tip_type = 17;
  if (has_tip_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->tip_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:userevent.Target)
}

::google::protobuf::uint8* Target::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:userevent.Target)
  // optional .userevent.Target.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 page_index = 2;
  if (has_page_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_index(), target);
  }

  // optional int32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank(), target);
  }

  // optional int32 grid_x = 4;
  if (has_grid_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->grid_x(), target);
  }

  // optional int32 grid_y = 5;
  if (has_grid_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->grid_y(), target);
  }

  // optional .userevent.ContainerType container_type = 6;
  if (has_container_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->container_type(), target);
  }

  // optional int32 cardinality = 7;
  if (has_cardinality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cardinality(), target);
  }

  // optional .userevent.ControlType control_type = 8;
  if (has_control_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->control_type(), target);
  }

  // optional .userevent.ItemType item_type = 9;
  if (has_item_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->item_type(), target);
  }

  // optional int32 package_name_hash = 10;
  if (has_package_name_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->package_name_hash(), target);
  }

  // optional int32 component_hash = 11;
  if (has_component_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->component_hash(), target);
  }

  // optional int32 intent_hash = 12;
  if (has_intent_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->intent_hash(), target);
  }

  // optional int32 span_x = 13 [default = 1];
  if (has_span_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->span_x(), target);
  }

  // optional int32 span_y = 14 [default = 1];
  if (has_span_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->span_y(), target);
  }

  // optional int32 predictedRank = 15;
  if (has_predictedrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->predictedrank(), target);
  }

  // optional .userevent.TargetExtension extension = 16;
  if (has_extension()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->extension_, false, target);
  }

  // optional .userevent.TipType tip_type = 17;
  if (has_tip_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->tip_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userevent.Target)
  return target;
}

size_t Target::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userevent.Target)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .userevent.Target.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 page_index = 2;
    if (has_page_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_index());
    }

    // optional int32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 grid_x = 4;
    if (has_grid_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grid_x());
    }

    // optional int32 grid_y = 5;
    if (has_grid_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grid_y());
    }

    // optional .userevent.ContainerType container_type = 6;
    if (has_container_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->container_type());
    }

    // optional int32 cardinality = 7;
    if (has_cardinality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardinality());
    }

    // optional .userevent.ControlType control_type = 8;
    if (has_control_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->control_type());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .userevent.ItemType item_type = 9;
    if (has_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->item_type());
    }

    // optional int32 package_name_hash = 10;
    if (has_package_name_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->package_name_hash());
    }

    // optional int32 component_hash = 11;
    if (has_component_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->component_hash());
    }

    // optional int32 intent_hash = 12;
    if (has_intent_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intent_hash());
    }

    // optional int32 span_x = 13 [default = 1];
    if (has_span_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->span_x());
    }

    // optional int32 span_y = 14 [default = 1];
    if (has_span_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->span_y());
    }

    // optional int32 predictedRank = 15;
    if (has_predictedrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->predictedrank());
    }

    // optional .userevent.TargetExtension extension = 16;
    if (has_extension()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->extension_);
    }

  }
  // optional .userevent.TipType tip_type = 17;
  if (has_tip_type()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tip_type());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Target::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userevent.Target)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Target* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Target>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userevent.Target)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userevent.Target)
    UnsafeMergeFrom(*source);
  }
}

void Target::MergeFrom(const Target& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userevent.Target)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Target::UnsafeMergeFrom(const Target& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_page_index()) {
      set_page_index(from.page_index());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_grid_x()) {
      set_grid_x(from.grid_x());
    }
    if (from.has_grid_y()) {
      set_grid_y(from.grid_y());
    }
    if (from.has_container_type()) {
      set_container_type(from.container_type());
    }
    if (from.has_cardinality()) {
      set_cardinality(from.cardinality());
    }
    if (from.has_control_type()) {
      set_control_type(from.control_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_item_type()) {
      set_item_type(from.item_type());
    }
    if (from.has_package_name_hash()) {
      set_package_name_hash(from.package_name_hash());
    }
    if (from.has_component_hash()) {
      set_component_hash(from.component_hash());
    }
    if (from.has_intent_hash()) {
      set_intent_hash(from.intent_hash());
    }
    if (from.has_span_x()) {
      set_span_x(from.span_x());
    }
    if (from.has_span_y()) {
      set_span_y(from.span_y());
    }
    if (from.has_predictedrank()) {
      set_predictedrank(from.predictedrank());
    }
    if (from.has_extension()) {
      mutable_extension()->::userevent::TargetExtension::MergeFrom(from.extension());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tip_type()) {
      set_tip_type(from.tip_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Target::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userevent.Target)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Target::CopyFrom(const Target& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userevent.Target)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Target::IsInitialized() const {

  return true;
}

void Target::Swap(Target* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Target::InternalSwap(Target* other) {
  std::swap(type_, other->type_);
  std::swap(page_index_, other->page_index_);
  std::swap(rank_, other->rank_);
  std::swap(grid_x_, other->grid_x_);
  std::swap(grid_y_, other->grid_y_);
  std::swap(container_type_, other->container_type_);
  std::swap(cardinality_, other->cardinality_);
  std::swap(control_type_, other->control_type_);
  std::swap(item_type_, other->item_type_);
  std::swap(package_name_hash_, other->package_name_hash_);
  std::swap(component_hash_, other->component_hash_);
  std::swap(intent_hash_, other->intent_hash_);
  std::swap(span_x_, other->span_x_);
  std::swap(span_y_, other->span_y_);
  std::swap(predictedrank_, other->predictedrank_);
  std::swap(extension_, other->extension_);
  std::swap(tip_type_, other->tip_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Target::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Target_descriptor_;
  metadata.reflection = Target_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Target

// optional .userevent.Target.Type type = 1;
bool Target::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Target::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Target::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Target::clear_type() {
  type_ = 0;
  clear_has_type();
}
::userevent::Target_Type Target::type() const {
  // @@protoc_insertion_point(field_get:userevent.Target.type)
  return static_cast< ::userevent::Target_Type >(type_);
}
void Target::set_type(::userevent::Target_Type value) {
  assert(::userevent::Target_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:userevent.Target.type)
}

// optional int32 page_index = 2;
bool Target::has_page_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Target::set_has_page_index() {
  _has_bits_[0] |= 0x00000002u;
}
void Target::clear_has_page_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void Target::clear_page_index() {
  page_index_ = 0;
  clear_has_page_index();
}
::google::protobuf::int32 Target::page_index() const {
  // @@protoc_insertion_point(field_get:userevent.Target.page_index)
  return page_index_;
}
void Target::set_page_index(::google::protobuf::int32 value) {
  set_has_page_index();
  page_index_ = value;
  // @@protoc_insertion_point(field_set:userevent.Target.page_index)
}

// optional int32 rank = 3;
bool Target::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Target::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
void Target::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
void Target::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
::google::protobuf::int32 Target::rank() const {
  // @@protoc_insertion_point(field_get:userevent.Target.rank)
  return rank_;
}
void Target::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:userevent.Target.rank)
}

// optional int32 grid_x = 4;
bool Target::has_grid_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Target::set_has_grid_x() {
  _has_bits_[0] |= 0x00000008u;
}
void Target::clear_has_grid_x() {
  _has_bits_[0] &= ~0x00000008u;
}
void Target::clear_grid_x() {
  grid_x_ = 0;
  clear_has_grid_x();
}
::google::protobuf::int32 Target::grid_x() const {
  // @@protoc_insertion_point(field_get:userevent.Target.grid_x)
  return grid_x_;
}
void Target::set_grid_x(::google::protobuf::int32 value) {
  set_has_grid_x();
  grid_x_ = value;
  // @@protoc_insertion_point(field_set:userevent.Target.grid_x)
}

// optional int32 grid_y = 5;
bool Target::has_grid_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Target::set_has_grid_y() {
  _has_bits_[0] |= 0x00000010u;
}
void Target::clear_has_grid_y() {
  _has_bits_[0] &= ~0x00000010u;
}
void Target::clear_grid_y() {
  grid_y_ = 0;
  clear_has_grid_y();
}
::google::protobuf::int32 Target::grid_y() const {
  // @@protoc_insertion_point(field_get:userevent.Target.grid_y)
  return grid_y_;
}
void Target::set_grid_y(::google::protobuf::int32 value) {
  set_has_grid_y();
  grid_y_ = value;
  // @@protoc_insertion_point(field_set:userevent.Target.grid_y)
}

// optional .userevent.ContainerType container_type = 6;
bool Target::has_container_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Target::set_has_container_type() {
  _has_bits_[0] |= 0x00000020u;
}
void Target::clear_has_container_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void Target::clear_container_type() {
  container_type_ = 0;
  clear_has_container_type();
}
::userevent::ContainerType Target::container_type() const {
  // @@protoc_insertion_point(field_get:userevent.Target.container_type)
  return static_cast< ::userevent::ContainerType >(container_type_);
}
void Target::set_container_type(::userevent::ContainerType value) {
  assert(::userevent::ContainerType_IsValid(value));
  set_has_container_type();
  container_type_ = value;
  // @@protoc_insertion_point(field_set:userevent.Target.container_type)
}

// optional int32 cardinality = 7;
bool Target::has_cardinality() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Target::set_has_cardinality() {
  _has_bits_[0] |= 0x00000040u;
}
void Target::clear_has_cardinality() {
  _has_bits_[0] &= ~0x00000040u;
}
void Target::clear_cardinality() {
  cardinality_ = 0;
  clear_has_cardinality();
}
::google::protobuf::int32 Target::cardinality() const {
  // @@protoc_insertion_point(field_get:userevent.Target.cardinality)
  return cardinality_;
}
void Target::set_cardinality(::google::protobuf::int32 value) {
  set_has_cardinality();
  cardinality_ = value;
  // @@protoc_insertion_point(field_set:userevent.Target.cardinality)
}

// optional .userevent.ControlType control_type = 8;
bool Target::has_control_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Target::set_has_control_type() {
  _has_bits_[0] |= 0x00000080u;
}
void Target::clear_has_control_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void Target::clear_control_type() {
  control_type_ = 0;
  clear_has_control_type();
}
::userevent::ControlType Target::control_type() const {
  // @@protoc_insertion_point(field_get:userevent.Target.control_type)
  return static_cast< ::userevent::ControlType >(control_type_);
}
void Target::set_control_type(::userevent::ControlType value) {
  assert(::userevent::ControlType_IsValid(value));
  set_has_control_type();
  control_type_ = value;
  // @@protoc_insertion_point(field_set:userevent.Target.control_type)
}

// optional .userevent.ItemType item_type = 9;
bool Target::has_item_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Target::set_has_item_type() {
  _has_bits_[0] |= 0x00000100u;
}
void Target::clear_has_item_type() {
  _has_bits_[0] &= ~0x00000100u;
}
void Target::clear_item_type() {
  item_type_ = 0;
  clear_has_item_type();
}
::userevent::ItemType Target::item_type() const {
  // @@protoc_insertion_point(field_get:userevent.Target.item_type)
  return static_cast< ::userevent::ItemType >(item_type_);
}
void Target::set_item_type(::userevent::ItemType value) {
  assert(::userevent::ItemType_IsValid(value));
  set_has_item_type();
  item_type_ = value;
  // @@protoc_insertion_point(field_set:userevent.Target.item_type)
}

// optional int32 package_name_hash = 10;
bool Target::has_package_name_hash() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Target::set_has_package_name_hash() {
  _has_bits_[0] |= 0x00000200u;
}
void Target::clear_has_package_name_hash() {
  _has_bits_[0] &= ~0x00000200u;
}
void Target::clear_package_name_hash() {
  package_name_hash_ = 0;
  clear_has_package_name_hash();
}
::google::protobuf::int32 Target::package_name_hash() const {
  // @@protoc_insertion_point(field_get:userevent.Target.package_name_hash)
  return package_name_hash_;
}
void Target::set_package_name_hash(::google::protobuf::int32 value) {
  set_has_package_name_hash();
  package_name_hash_ = value;
  // @@protoc_insertion_point(field_set:userevent.Target.package_name_hash)
}

// optional int32 component_hash = 11;
bool Target::has_component_hash() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Target::set_has_component_hash() {
  _has_bits_[0] |= 0x00000400u;
}
void Target::clear_has_component_hash() {
  _has_bits_[0] &= ~0x00000400u;
}
void Target::clear_component_hash() {
  component_hash_ = 0;
  clear_has_component_hash();
}
::google::protobuf::int32 Target::component_hash() const {
  // @@protoc_insertion_point(field_get:userevent.Target.component_hash)
  return component_hash_;
}
void Target::set_component_hash(::google::protobuf::int32 value) {
  set_has_component_hash();
  component_hash_ = value;
  // @@protoc_insertion_point(field_set:userevent.Target.component_hash)
}

// optional int32 intent_hash = 12;
bool Target::has_intent_hash() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Target::set_has_intent_hash() {
  _has_bits_[0] |= 0x00000800u;
}
void Target::clear_has_intent_hash() {
  _has_bits_[0] &= ~0x00000800u;
}
void Target::clear_intent_hash() {
  intent_hash_ = 0;
  clear_has_intent_hash();
}
::google::protobuf::int32 Target::intent_hash() const {
  // @@protoc_insertion_point(field_get:userevent.Target.intent_hash)
  return intent_hash_;
}
void Target::set_intent_hash(::google::protobuf::int32 value) {
  set_has_intent_hash();
  intent_hash_ = value;
  // @@protoc_insertion_point(field_set:userevent.Target.intent_hash)
}

// optional int32 span_x = 13 [default = 1];
bool Target::has_span_x() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Target::set_has_span_x() {
  _has_bits_[0] |= 0x00001000u;
}
void Target::clear_has_span_x() {
  _has_bits_[0] &= ~0x00001000u;
}
void Target::clear_span_x() {
  span_x_ = 1;
  clear_has_span_x();
}
::google::protobuf::int32 Target::span_x() const {
  // @@protoc_insertion_point(field_get:userevent.Target.span_x)
  return span_x_;
}
void Target::set_span_x(::google::protobuf::int32 value) {
  set_has_span_x();
  span_x_ = value;
  // @@protoc_insertion_point(field_set:userevent.Target.span_x)
}

// optional int32 span_y = 14 [default = 1];
bool Target::has_span_y() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Target::set_has_span_y() {
  _has_bits_[0] |= 0x00002000u;
}
void Target::clear_has_span_y() {
  _has_bits_[0] &= ~0x00002000u;
}
void Target::clear_span_y() {
  span_y_ = 1;
  clear_has_span_y();
}
::google::protobuf::int32 Target::span_y() const {
  // @@protoc_insertion_point(field_get:userevent.Target.span_y)
  return span_y_;
}
void Target::set_span_y(::google::protobuf::int32 value) {
  set_has_span_y();
  span_y_ = value;
  // @@protoc_insertion_point(field_set:userevent.Target.span_y)
}

// optional int32 predictedRank = 15;
bool Target::has_predictedrank() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Target::set_has_predictedrank() {
  _has_bits_[0] |= 0x00004000u;
}
void Target::clear_has_predictedrank() {
  _has_bits_[0] &= ~0x00004000u;
}
void Target::clear_predictedrank() {
  predictedrank_ = 0;
  clear_has_predictedrank();
}
::google::protobuf::int32 Target::predictedrank() const {
  // @@protoc_insertion_point(field_get:userevent.Target.predictedRank)
  return predictedrank_;
}
void Target::set_predictedrank(::google::protobuf::int32 value) {
  set_has_predictedrank();
  predictedrank_ = value;
  // @@protoc_insertion_point(field_set:userevent.Target.predictedRank)
}

// optional .userevent.TargetExtension extension = 16;
bool Target::has_extension() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Target::set_has_extension() {
  _has_bits_[0] |= 0x00008000u;
}
void Target::clear_has_extension() {
  _has_bits_[0] &= ~0x00008000u;
}
void Target::clear_extension() {
  if (extension_ != NULL) extension_->::userevent::TargetExtension::Clear();
  clear_has_extension();
}
const ::userevent::TargetExtension& Target::extension() const {
  // @@protoc_insertion_point(field_get:userevent.Target.extension)
  return extension_ != NULL ? *extension_
                         : *::userevent::TargetExtension::internal_default_instance();
}
::userevent::TargetExtension* Target::mutable_extension() {
  set_has_extension();
  if (extension_ == NULL) {
    extension_ = new ::userevent::TargetExtension;
  }
  // @@protoc_insertion_point(field_mutable:userevent.Target.extension)
  return extension_;
}
::userevent::TargetExtension* Target::release_extension() {
  // @@protoc_insertion_point(field_release:userevent.Target.extension)
  clear_has_extension();
  ::userevent::TargetExtension* temp = extension_;
  extension_ = NULL;
  return temp;
}
void Target::set_allocated_extension(::userevent::TargetExtension* extension) {
  delete extension_;
  extension_ = extension;
  if (extension) {
    set_has_extension();
  } else {
    clear_has_extension();
  }
  // @@protoc_insertion_point(field_set_allocated:userevent.Target.extension)
}

// optional .userevent.TipType tip_type = 17;
bool Target::has_tip_type() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Target::set_has_tip_type() {
  _has_bits_[0] |= 0x00010000u;
}
void Target::clear_has_tip_type() {
  _has_bits_[0] &= ~0x00010000u;
}
void Target::clear_tip_type() {
  tip_type_ = 0;
  clear_has_tip_type();
}
::userevent::TipType Target::tip_type() const {
  // @@protoc_insertion_point(field_get:userevent.Target.tip_type)
  return static_cast< ::userevent::TipType >(tip_type_);
}
void Target::set_tip_type(::userevent::TipType value) {
  assert(::userevent::TipType_IsValid(value));
  set_has_tip_type();
  tip_type_ = value;
  // @@protoc_insertion_point(field_set:userevent.Target.tip_type)
}

inline const Target* Target::internal_default_instance() {
  return &Target_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Action_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Action_Type_descriptor_;
}
bool Action_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Action_Type Action::TOUCH;
const Action_Type Action::AUTOMATED;
const Action_Type Action::COMMAND;
const Action_Type Action::TIP;
const Action_Type Action::Type_MIN;
const Action_Type Action::Type_MAX;
const int Action::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Action_Touch_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Action_Touch_descriptor_;
}
bool Action_Touch_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Action_Touch Action::TAP;
const Action_Touch Action::LONGPRESS;
const Action_Touch Action::DRAGDROP;
const Action_Touch Action::SWIPE;
const Action_Touch Action::FLING;
const Action_Touch Action::PINCH;
const Action_Touch Action::Touch_MIN;
const Action_Touch Action::Touch_MAX;
const int Action::Touch_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Action_Direction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Action_Direction_descriptor_;
}
bool Action_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Action_Direction Action::NONE;
const Action_Direction Action::UP;
const Action_Direction Action::DOWN;
const Action_Direction Action::LEFT;
const Action_Direction Action::RIGHT;
const Action_Direction Action::Direction_MIN;
const Action_Direction Action::Direction_MAX;
const int Action::Direction_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Action_Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Action_Command_descriptor_;
}
bool Action_Command_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Action_Command Action::HOME_INTENT;
const Action_Command Action::BACK;
const Action_Command Action::ENTRY;
const Action_Command Action::CANCEL;
const Action_Command Action::CONFIRM;
const Action_Command Action::STOP;
const Action_Command Action::RECENTS_BUTTON;
const Action_Command Action::RESUME;
const Action_Command Action::Command_MIN;
const Action_Command Action::Command_MAX;
const int Action::Command_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Action::kTypeFieldNumber;
const int Action::kTouchFieldNumber;
const int Action::kDirFieldNumber;
const int Action::kCommandFieldNumber;
const int Action::kIsOutsideFieldNumber;
const int Action::kIsStateChangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Action::Action()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_launcher_5flog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:userevent.Action)
}

void Action::InitAsDefaultInstance() {
}

Action::Action(const Action& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userevent.Action)
}

void Action::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&type_, 0, reinterpret_cast<char*>(&is_state_change_) -
    reinterpret_cast<char*>(&type_) + sizeof(is_state_change_));
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:userevent.Action)
  SharedDtor();
}

void Action::SharedDtor() {
}

void Action::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Action::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Action_descriptor_;
}

const Action& Action::default_instance() {
  protobuf_InitDefaults_launcher_5flog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Action> Action_default_instance_;

Action* Action::New(::google::protobuf::Arena* arena) const {
  Action* n = new Action;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:userevent.Action)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Action, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Action*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, is_state_change_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:userevent.Action)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .userevent.Action.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::userevent::Action_Type_IsValid(value)) {
            set_type(static_cast< ::userevent::Action_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_touch;
        break;
      }

      // optional .userevent.Action.Touch touch = 2;
      case 2: {
        if (tag == 16) {
         parse_touch:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::userevent::Action_Touch_IsValid(value)) {
            set_touch(static_cast< ::userevent::Action_Touch >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dir;
        break;
      }

      // optional .userevent.Action.Direction dir = 3;
      case 3: {
        if (tag == 24) {
         parse_dir:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::userevent::Action_Direction_IsValid(value)) {
            set_dir(static_cast< ::userevent::Action_Direction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_command;
        break;
      }

      // optional .userevent.Action.Command command = 4;
      case 4: {
        if (tag == 32) {
         parse_command:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::userevent::Action_Command_IsValid(value)) {
            set_command(static_cast< ::userevent::Action_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_outside;
        break;
      }

      // optional bool is_outside = 5;
      case 5: {
        if (tag == 40) {
         parse_is_outside:
          set_has_is_outside();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_outside_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_state_change;
        break;
      }

      // optional bool is_state_change = 6;
      case 6: {
        if (tag == 48) {
         parse_is_state_change:
          set_has_is_state_change();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_state_change_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userevent.Action)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userevent.Action)
  return false;
#undef DO_
}

void Action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userevent.Action)
  // optional .userevent.Action.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .userevent.Action.Touch touch = 2;
  if (has_touch()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->touch(), output);
  }

  // optional .userevent.Action.Direction dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->dir(), output);
  }

  // optional .userevent.Action.Command command = 4;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->command(), output);
  }

  // optional bool is_outside = 5;
  if (has_is_outside()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_outside(), output);
  }

  // optional bool is_state_change = 6;
  if (has_is_state_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_state_change(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:userevent.Action)
}

::google::protobuf::uint8* Action::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:userevent.Action)
  // optional .userevent.Action.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .userevent.Action.Touch touch = 2;
  if (has_touch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->touch(), target);
  }

  // optional .userevent.Action.Direction dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->dir(), target);
  }

  // optional .userevent.Action.Command command = 4;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->command(), target);
  }

  // optional bool is_outside = 5;
  if (has_is_outside()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_outside(), target);
  }

  // optional bool is_state_change = 6;
  if (has_is_state_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_state_change(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userevent.Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userevent.Action)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional .userevent.Action.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .userevent.Action.Touch touch = 2;
    if (has_touch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->touch());
    }

    // optional .userevent.Action.Direction dir = 3;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dir());
    }

    // optional .userevent.Action.Command command = 4;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
    }

    // optional bool is_outside = 5;
    if (has_is_outside()) {
      total_size += 1 + 1;
    }

    // optional bool is_state_change = 6;
    if (has_is_state_change()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Action::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userevent.Action)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Action* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Action>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userevent.Action)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userevent.Action)
    UnsafeMergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userevent.Action)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Action::UnsafeMergeFrom(const Action& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_touch()) {
      set_touch(from.touch());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_is_outside()) {
      set_is_outside(from.is_outside());
    }
    if (from.has_is_state_change()) {
      set_is_state_change(from.is_state_change());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Action::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userevent.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userevent.Action)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Action::IsInitialized() const {

  return true;
}

void Action::Swap(Action* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Action::InternalSwap(Action* other) {
  std::swap(type_, other->type_);
  std::swap(touch_, other->touch_);
  std::swap(dir_, other->dir_);
  std::swap(command_, other->command_);
  std::swap(is_outside_, other->is_outside_);
  std::swap(is_state_change_, other->is_state_change_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Action::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Action_descriptor_;
  metadata.reflection = Action_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Action

// optional .userevent.Action.Type type = 1;
bool Action::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Action::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Action::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Action::clear_type() {
  type_ = 0;
  clear_has_type();
}
::userevent::Action_Type Action::type() const {
  // @@protoc_insertion_point(field_get:userevent.Action.type)
  return static_cast< ::userevent::Action_Type >(type_);
}
void Action::set_type(::userevent::Action_Type value) {
  assert(::userevent::Action_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:userevent.Action.type)
}

// optional .userevent.Action.Touch touch = 2;
bool Action::has_touch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Action::set_has_touch() {
  _has_bits_[0] |= 0x00000002u;
}
void Action::clear_has_touch() {
  _has_bits_[0] &= ~0x00000002u;
}
void Action::clear_touch() {
  touch_ = 0;
  clear_has_touch();
}
::userevent::Action_Touch Action::touch() const {
  // @@protoc_insertion_point(field_get:userevent.Action.touch)
  return static_cast< ::userevent::Action_Touch >(touch_);
}
void Action::set_touch(::userevent::Action_Touch value) {
  assert(::userevent::Action_Touch_IsValid(value));
  set_has_touch();
  touch_ = value;
  // @@protoc_insertion_point(field_set:userevent.Action.touch)
}

// optional .userevent.Action.Direction dir = 3;
bool Action::has_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Action::set_has_dir() {
  _has_bits_[0] |= 0x00000004u;
}
void Action::clear_has_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
void Action::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
::userevent::Action_Direction Action::dir() const {
  // @@protoc_insertion_point(field_get:userevent.Action.dir)
  return static_cast< ::userevent::Action_Direction >(dir_);
}
void Action::set_dir(::userevent::Action_Direction value) {
  assert(::userevent::Action_Direction_IsValid(value));
  set_has_dir();
  dir_ = value;
  // @@protoc_insertion_point(field_set:userevent.Action.dir)
}

// optional .userevent.Action.Command command = 4;
bool Action::has_command() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Action::set_has_command() {
  _has_bits_[0] |= 0x00000008u;
}
void Action::clear_has_command() {
  _has_bits_[0] &= ~0x00000008u;
}
void Action::clear_command() {
  command_ = 0;
  clear_has_command();
}
::userevent::Action_Command Action::command() const {
  // @@protoc_insertion_point(field_get:userevent.Action.command)
  return static_cast< ::userevent::Action_Command >(command_);
}
void Action::set_command(::userevent::Action_Command value) {
  assert(::userevent::Action_Command_IsValid(value));
  set_has_command();
  command_ = value;
  // @@protoc_insertion_point(field_set:userevent.Action.command)
}

// optional bool is_outside = 5;
bool Action::has_is_outside() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Action::set_has_is_outside() {
  _has_bits_[0] |= 0x00000010u;
}
void Action::clear_has_is_outside() {
  _has_bits_[0] &= ~0x00000010u;
}
void Action::clear_is_outside() {
  is_outside_ = false;
  clear_has_is_outside();
}
bool Action::is_outside() const {
  // @@protoc_insertion_point(field_get:userevent.Action.is_outside)
  return is_outside_;
}
void Action::set_is_outside(bool value) {
  set_has_is_outside();
  is_outside_ = value;
  // @@protoc_insertion_point(field_set:userevent.Action.is_outside)
}

// optional bool is_state_change = 6;
bool Action::has_is_state_change() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Action::set_has_is_state_change() {
  _has_bits_[0] |= 0x00000020u;
}
void Action::clear_has_is_state_change() {
  _has_bits_[0] &= ~0x00000020u;
}
void Action::clear_is_state_change() {
  is_state_change_ = false;
  clear_has_is_state_change();
}
bool Action::is_state_change() const {
  // @@protoc_insertion_point(field_get:userevent.Action.is_state_change)
  return is_state_change_;
}
void Action::set_is_state_change(bool value) {
  set_has_is_state_change();
  is_state_change_ = value;
  // @@protoc_insertion_point(field_set:userevent.Action.is_state_change)
}

inline const Action* Action::internal_default_instance() {
  return &Action_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LauncherEvent::kActionFieldNumber;
const int LauncherEvent::kSrcTargetFieldNumber;
const int LauncherEvent::kDestTargetFieldNumber;
const int LauncherEvent::kActionDurationMillisFieldNumber;
const int LauncherEvent::kElapsedContainerMillisFieldNumber;
const int LauncherEvent::kElapsedSessionMillisFieldNumber;
const int LauncherEvent::kIsInMultiWindowModeFieldNumber;
const int LauncherEvent::kIsInLandscapeModeFieldNumber;
const int LauncherEvent::kExtensionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LauncherEvent::LauncherEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_launcher_5flog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:userevent.LauncherEvent)
}

void LauncherEvent::InitAsDefaultInstance() {
  action_ = const_cast< ::userevent::Action*>(
      ::userevent::Action::internal_default_instance());
  extension_ = const_cast< ::userevent::LauncherEventExtension*>(
      ::userevent::LauncherEventExtension::internal_default_instance());
}

LauncherEvent::LauncherEvent(const LauncherEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userevent.LauncherEvent)
}

void LauncherEvent::SharedCtor() {
  _cached_size_ = 0;
  action_ = NULL;
  extension_ = NULL;
  ::memset(&action_duration_millis_, 0, reinterpret_cast<char*>(&is_in_landscape_mode_) -
    reinterpret_cast<char*>(&action_duration_millis_) + sizeof(is_in_landscape_mode_));
}

LauncherEvent::~LauncherEvent() {
  // @@protoc_insertion_point(destructor:userevent.LauncherEvent)
  SharedDtor();
}

void LauncherEvent::SharedDtor() {
  if (this != &LauncherEvent_default_instance_.get()) {
    delete action_;
    delete extension_;
  }
}

void LauncherEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LauncherEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LauncherEvent_descriptor_;
}

const LauncherEvent& LauncherEvent::default_instance() {
  protobuf_InitDefaults_launcher_5flog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LauncherEvent> LauncherEvent_default_instance_;

LauncherEvent* LauncherEvent::New(::google::protobuf::Arena* arena) const {
  LauncherEvent* n = new LauncherEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LauncherEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:userevent.LauncherEvent)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LauncherEvent, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LauncherEvent*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 249u) {
    ZR_(action_duration_millis_, is_in_landscape_mode_);
    if (has_action()) {
      if (action_ != NULL) action_->::userevent::Action::Clear();
    }
  }
  if (has_extension()) {
    if (extension_ != NULL) extension_->::userevent::LauncherEventExtension::Clear();
  }

#undef ZR_HELPER_
#undef ZR_

  src_target_.Clear();
  dest_target_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LauncherEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:userevent.LauncherEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .userevent.Action action = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_src_target;
        break;
      }

      // repeated .userevent.Target src_target = 2;
      case 2: {
        if (tag == 18) {
         parse_src_target:
          DO_(input->IncrementRecursionDepth());
         parse_loop_src_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_src_target()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_src_target;
        if (input->ExpectTag(26)) goto parse_loop_dest_target;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .userevent.Target dest_target = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_dest_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_dest_target()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_dest_target;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_action_duration_millis;
        break;
      }

      // optional int64 action_duration_millis = 4;
      case 4: {
        if (tag == 32) {
         parse_action_duration_millis:
          set_has_action_duration_millis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &action_duration_millis_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_elapsed_container_millis;
        break;
      }

      // optional int64 elapsed_container_millis = 5;
      case 5: {
        if (tag == 40) {
         parse_elapsed_container_millis:
          set_has_elapsed_container_millis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &elapsed_container_millis_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_elapsed_session_millis;
        break;
      }

      // optional int64 elapsed_session_millis = 6;
      case 6: {
        if (tag == 48) {
         parse_elapsed_session_millis:
          set_has_elapsed_session_millis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &elapsed_session_millis_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_in_multi_window_mode;
        break;
      }

      // optional bool is_in_multi_window_mode = 7;
      case 7: {
        if (tag == 56) {
         parse_is_in_multi_window_mode:
          set_has_is_in_multi_window_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_in_multi_window_mode_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_is_in_landscape_mode;
        break;
      }

      // optional bool is_in_landscape_mode = 8;
      case 8: {
        if (tag == 64) {
         parse_is_in_landscape_mode:
          set_has_is_in_landscape_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_in_landscape_mode_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_extension;
        break;
      }

      // optional .userevent.LauncherEventExtension extension = 9;
      case 9: {
        if (tag == 74) {
         parse_extension:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extension()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userevent.LauncherEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userevent.LauncherEvent)
  return false;
#undef DO_
}

void LauncherEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userevent.LauncherEvent)
  // required .userevent.Action action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->action_, output);
  }

  // repeated .userevent.Target src_target = 2;
  for (unsigned int i = 0, n = this->src_target_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->src_target(i), output);
  }

  // repeated .userevent.Target dest_target = 3;
  for (unsigned int i = 0, n = this->dest_target_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dest_target(i), output);
  }

  // optional int64 action_duration_millis = 4;
  if (has_action_duration_millis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->action_duration_millis(), output);
  }

  // optional int64 elapsed_container_millis = 5;
  if (has_elapsed_container_millis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->elapsed_container_millis(), output);
  }

  // optional int64 elapsed_session_millis = 6;
  if (has_elapsed_session_millis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->elapsed_session_millis(), output);
  }

  // optional bool is_in_multi_window_mode = 7;
  if (has_is_in_multi_window_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_in_multi_window_mode(), output);
  }

  // optional bool is_in_landscape_mode = 8;
  if (has_is_in_landscape_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_in_landscape_mode(), output);
  }

  // optional .userevent.LauncherEventExtension extension = 9;
  if (has_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->extension_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:userevent.LauncherEvent)
}

::google::protobuf::uint8* LauncherEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:userevent.LauncherEvent)
  // required .userevent.Action action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->action_, false, target);
  }

  // repeated .userevent.Target src_target = 2;
  for (unsigned int i = 0, n = this->src_target_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->src_target(i), false, target);
  }

  // repeated .userevent.Target dest_target = 3;
  for (unsigned int i = 0, n = this->dest_target_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->dest_target(i), false, target);
  }

  // optional int64 action_duration_millis = 4;
  if (has_action_duration_millis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->action_duration_millis(), target);
  }

  // optional int64 elapsed_container_millis = 5;
  if (has_elapsed_container_millis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->elapsed_container_millis(), target);
  }

  // optional int64 elapsed_session_millis = 6;
  if (has_elapsed_session_millis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->elapsed_session_millis(), target);
  }

  // optional bool is_in_multi_window_mode = 7;
  if (has_is_in_multi_window_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_in_multi_window_mode(), target);
  }

  // optional bool is_in_landscape_mode = 8;
  if (has_is_in_landscape_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_in_landscape_mode(), target);
  }

  // optional .userevent.LauncherEventExtension extension = 9;
  if (has_extension()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->extension_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userevent.LauncherEvent)
  return target;
}

size_t LauncherEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userevent.LauncherEvent)
  size_t total_size = 0;

  // required .userevent.Action action = 1;
  if (has_action()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->action_);
  }
  if (_has_bits_[3 / 32] & 248u) {
    // optional int64 action_duration_millis = 4;
    if (has_action_duration_millis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->action_duration_millis());
    }

    // optional int64 elapsed_container_millis = 5;
    if (has_elapsed_container_millis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->elapsed_container_millis());
    }

    // optional int64 elapsed_session_millis = 6;
    if (has_elapsed_session_millis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->elapsed_session_millis());
    }

    // optional bool is_in_multi_window_mode = 7;
    if (has_is_in_multi_window_mode()) {
      total_size += 1 + 1;
    }

    // optional bool is_in_landscape_mode = 8;
    if (has_is_in_landscape_mode()) {
      total_size += 1 + 1;
    }

  }
  // optional .userevent.LauncherEventExtension extension = 9;
  if (has_extension()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->extension_);
  }

  // repeated .userevent.Target src_target = 2;
  {
    unsigned int count = this->src_target_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src_target(i));
    }
  }

  // repeated .userevent.Target dest_target = 3;
  {
    unsigned int count = this->dest_target_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dest_target(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LauncherEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userevent.LauncherEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LauncherEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LauncherEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userevent.LauncherEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userevent.LauncherEvent)
    UnsafeMergeFrom(*source);
  }
}

void LauncherEvent::MergeFrom(const LauncherEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userevent.LauncherEvent)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LauncherEvent::UnsafeMergeFrom(const LauncherEvent& from) {
  GOOGLE_DCHECK(&from != this);
  src_target_.MergeFrom(from.src_target_);
  dest_target_.MergeFrom(from.dest_target_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      mutable_action()->::userevent::Action::MergeFrom(from.action());
    }
    if (from.has_action_duration_millis()) {
      set_action_duration_millis(from.action_duration_millis());
    }
    if (from.has_elapsed_container_millis()) {
      set_elapsed_container_millis(from.elapsed_container_millis());
    }
    if (from.has_elapsed_session_millis()) {
      set_elapsed_session_millis(from.elapsed_session_millis());
    }
    if (from.has_is_in_multi_window_mode()) {
      set_is_in_multi_window_mode(from.is_in_multi_window_mode());
    }
    if (from.has_is_in_landscape_mode()) {
      set_is_in_landscape_mode(from.is_in_landscape_mode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_extension()) {
      mutable_extension()->::userevent::LauncherEventExtension::MergeFrom(from.extension());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void LauncherEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userevent.LauncherEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LauncherEvent::CopyFrom(const LauncherEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userevent.LauncherEvent)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LauncherEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LauncherEvent::Swap(LauncherEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LauncherEvent::InternalSwap(LauncherEvent* other) {
  std::swap(action_, other->action_);
  src_target_.UnsafeArenaSwap(&other->src_target_);
  dest_target_.UnsafeArenaSwap(&other->dest_target_);
  std::swap(action_duration_millis_, other->action_duration_millis_);
  std::swap(elapsed_container_millis_, other->elapsed_container_millis_);
  std::swap(elapsed_session_millis_, other->elapsed_session_millis_);
  std::swap(is_in_multi_window_mode_, other->is_in_multi_window_mode_);
  std::swap(is_in_landscape_mode_, other->is_in_landscape_mode_);
  std::swap(extension_, other->extension_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LauncherEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LauncherEvent_descriptor_;
  metadata.reflection = LauncherEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LauncherEvent

// required .userevent.Action action = 1;
bool LauncherEvent::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LauncherEvent::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
void LauncherEvent::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
void LauncherEvent::clear_action() {
  if (action_ != NULL) action_->::userevent::Action::Clear();
  clear_has_action();
}
const ::userevent::Action& LauncherEvent::action() const {
  // @@protoc_insertion_point(field_get:userevent.LauncherEvent.action)
  return action_ != NULL ? *action_
                         : *::userevent::Action::internal_default_instance();
}
::userevent::Action* LauncherEvent::mutable_action() {
  set_has_action();
  if (action_ == NULL) {
    action_ = new ::userevent::Action;
  }
  // @@protoc_insertion_point(field_mutable:userevent.LauncherEvent.action)
  return action_;
}
::userevent::Action* LauncherEvent::release_action() {
  // @@protoc_insertion_point(field_release:userevent.LauncherEvent.action)
  clear_has_action();
  ::userevent::Action* temp = action_;
  action_ = NULL;
  return temp;
}
void LauncherEvent::set_allocated_action(::userevent::Action* action) {
  delete action_;
  action_ = action;
  if (action) {
    set_has_action();
  } else {
    clear_has_action();
  }
  // @@protoc_insertion_point(field_set_allocated:userevent.LauncherEvent.action)
}

// repeated .userevent.Target src_target = 2;
int LauncherEvent::src_target_size() const {
  return src_target_.size();
}
void LauncherEvent::clear_src_target() {
  src_target_.Clear();
}
const ::userevent::Target& LauncherEvent::src_target(int index) const {
  // @@protoc_insertion_point(field_get:userevent.LauncherEvent.src_target)
  return src_target_.Get(index);
}
::userevent::Target* LauncherEvent::mutable_src_target(int index) {
  // @@protoc_insertion_point(field_mutable:userevent.LauncherEvent.src_target)
  return src_target_.Mutable(index);
}
::userevent::Target* LauncherEvent::add_src_target() {
  // @@protoc_insertion_point(field_add:userevent.LauncherEvent.src_target)
  return src_target_.Add();
}
::google::protobuf::RepeatedPtrField< ::userevent::Target >*
LauncherEvent::mutable_src_target() {
  // @@protoc_insertion_point(field_mutable_list:userevent.LauncherEvent.src_target)
  return &src_target_;
}
const ::google::protobuf::RepeatedPtrField< ::userevent::Target >&
LauncherEvent::src_target() const {
  // @@protoc_insertion_point(field_list:userevent.LauncherEvent.src_target)
  return src_target_;
}

// repeated .userevent.Target dest_target = 3;
int LauncherEvent::dest_target_size() const {
  return dest_target_.size();
}
void LauncherEvent::clear_dest_target() {
  dest_target_.Clear();
}
const ::userevent::Target& LauncherEvent::dest_target(int index) const {
  // @@protoc_insertion_point(field_get:userevent.LauncherEvent.dest_target)
  return dest_target_.Get(index);
}
::userevent::Target* LauncherEvent::mutable_dest_target(int index) {
  // @@protoc_insertion_point(field_mutable:userevent.LauncherEvent.dest_target)
  return dest_target_.Mutable(index);
}
::userevent::Target* LauncherEvent::add_dest_target() {
  // @@protoc_insertion_point(field_add:userevent.LauncherEvent.dest_target)
  return dest_target_.Add();
}
::google::protobuf::RepeatedPtrField< ::userevent::Target >*
LauncherEvent::mutable_dest_target() {
  // @@protoc_insertion_point(field_mutable_list:userevent.LauncherEvent.dest_target)
  return &dest_target_;
}
const ::google::protobuf::RepeatedPtrField< ::userevent::Target >&
LauncherEvent::dest_target() const {
  // @@protoc_insertion_point(field_list:userevent.LauncherEvent.dest_target)
  return dest_target_;
}

// optional int64 action_duration_millis = 4;
bool LauncherEvent::has_action_duration_millis() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LauncherEvent::set_has_action_duration_millis() {
  _has_bits_[0] |= 0x00000008u;
}
void LauncherEvent::clear_has_action_duration_millis() {
  _has_bits_[0] &= ~0x00000008u;
}
void LauncherEvent::clear_action_duration_millis() {
  action_duration_millis_ = GOOGLE_LONGLONG(0);
  clear_has_action_duration_millis();
}
::google::protobuf::int64 LauncherEvent::action_duration_millis() const {
  // @@protoc_insertion_point(field_get:userevent.LauncherEvent.action_duration_millis)
  return action_duration_millis_;
}
void LauncherEvent::set_action_duration_millis(::google::protobuf::int64 value) {
  set_has_action_duration_millis();
  action_duration_millis_ = value;
  // @@protoc_insertion_point(field_set:userevent.LauncherEvent.action_duration_millis)
}

// optional int64 elapsed_container_millis = 5;
bool LauncherEvent::has_elapsed_container_millis() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LauncherEvent::set_has_elapsed_container_millis() {
  _has_bits_[0] |= 0x00000010u;
}
void LauncherEvent::clear_has_elapsed_container_millis() {
  _has_bits_[0] &= ~0x00000010u;
}
void LauncherEvent::clear_elapsed_container_millis() {
  elapsed_container_millis_ = GOOGLE_LONGLONG(0);
  clear_has_elapsed_container_millis();
}
::google::protobuf::int64 LauncherEvent::elapsed_container_millis() const {
  // @@protoc_insertion_point(field_get:userevent.LauncherEvent.elapsed_container_millis)
  return elapsed_container_millis_;
}
void LauncherEvent::set_elapsed_container_millis(::google::protobuf::int64 value) {
  set_has_elapsed_container_millis();
  elapsed_container_millis_ = value;
  // @@protoc_insertion_point(field_set:userevent.LauncherEvent.elapsed_container_millis)
}

// optional int64 elapsed_session_millis = 6;
bool LauncherEvent::has_elapsed_session_millis() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LauncherEvent::set_has_elapsed_session_millis() {
  _has_bits_[0] |= 0x00000020u;
}
void LauncherEvent::clear_has_elapsed_session_millis() {
  _has_bits_[0] &= ~0x00000020u;
}
void LauncherEvent::clear_elapsed_session_millis() {
  elapsed_session_millis_ = GOOGLE_LONGLONG(0);
  clear_has_elapsed_session_millis();
}
::google::protobuf::int64 LauncherEvent::elapsed_session_millis() const {
  // @@protoc_insertion_point(field_get:userevent.LauncherEvent.elapsed_session_millis)
  return elapsed_session_millis_;
}
void LauncherEvent::set_elapsed_session_millis(::google::protobuf::int64 value) {
  set_has_elapsed_session_millis();
  elapsed_session_millis_ = value;
  // @@protoc_insertion_point(field_set:userevent.LauncherEvent.elapsed_session_millis)
}

// optional bool is_in_multi_window_mode = 7;
bool LauncherEvent::has_is_in_multi_window_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LauncherEvent::set_has_is_in_multi_window_mode() {
  _has_bits_[0] |= 0x00000040u;
}
void LauncherEvent::clear_has_is_in_multi_window_mode() {
  _has_bits_[0] &= ~0x00000040u;
}
void LauncherEvent::clear_is_in_multi_window_mode() {
  is_in_multi_window_mode_ = false;
  clear_has_is_in_multi_window_mode();
}
bool LauncherEvent::is_in_multi_window_mode() const {
  // @@protoc_insertion_point(field_get:userevent.LauncherEvent.is_in_multi_window_mode)
  return is_in_multi_window_mode_;
}
void LauncherEvent::set_is_in_multi_window_mode(bool value) {
  set_has_is_in_multi_window_mode();
  is_in_multi_window_mode_ = value;
  // @@protoc_insertion_point(field_set:userevent.LauncherEvent.is_in_multi_window_mode)
}

// optional bool is_in_landscape_mode = 8;
bool LauncherEvent::has_is_in_landscape_mode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LauncherEvent::set_has_is_in_landscape_mode() {
  _has_bits_[0] |= 0x00000080u;
}
void LauncherEvent::clear_has_is_in_landscape_mode() {
  _has_bits_[0] &= ~0x00000080u;
}
void LauncherEvent::clear_is_in_landscape_mode() {
  is_in_landscape_mode_ = false;
  clear_has_is_in_landscape_mode();
}
bool LauncherEvent::is_in_landscape_mode() const {
  // @@protoc_insertion_point(field_get:userevent.LauncherEvent.is_in_landscape_mode)
  return is_in_landscape_mode_;
}
void LauncherEvent::set_is_in_landscape_mode(bool value) {
  set_has_is_in_landscape_mode();
  is_in_landscape_mode_ = value;
  // @@protoc_insertion_point(field_set:userevent.LauncherEvent.is_in_landscape_mode)
}

// optional .userevent.LauncherEventExtension extension = 9;
bool LauncherEvent::has_extension() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LauncherEvent::set_has_extension() {
  _has_bits_[0] |= 0x00000100u;
}
void LauncherEvent::clear_has_extension() {
  _has_bits_[0] &= ~0x00000100u;
}
void LauncherEvent::clear_extension() {
  if (extension_ != NULL) extension_->::userevent::LauncherEventExtension::Clear();
  clear_has_extension();
}
const ::userevent::LauncherEventExtension& LauncherEvent::extension() const {
  // @@protoc_insertion_point(field_get:userevent.LauncherEvent.extension)
  return extension_ != NULL ? *extension_
                         : *::userevent::LauncherEventExtension::internal_default_instance();
}
::userevent::LauncherEventExtension* LauncherEvent::mutable_extension() {
  set_has_extension();
  if (extension_ == NULL) {
    extension_ = new ::userevent::LauncherEventExtension;
  }
  // @@protoc_insertion_point(field_mutable:userevent.LauncherEvent.extension)
  return extension_;
}
::userevent::LauncherEventExtension* LauncherEvent::release_extension() {
  // @@protoc_insertion_point(field_release:userevent.LauncherEvent.extension)
  clear_has_extension();
  ::userevent::LauncherEventExtension* temp = extension_;
  extension_ = NULL;
  return temp;
}
void LauncherEvent::set_allocated_extension(::userevent::LauncherEventExtension* extension) {
  delete extension_;
  extension_ = extension;
  if (extension) {
    set_has_extension();
  } else {
    clear_has_extension();
  }
  // @@protoc_insertion_point(field_set_allocated:userevent.LauncherEvent.extension)
}

inline const LauncherEvent* LauncherEvent::internal_default_instance() {
  return &LauncherEvent_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace userevent

// @@protoc_insertion_point(global_scope)
